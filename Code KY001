 
#include <WiFiClientSecure.h>
#include <PubSubClient.h> // install with Library Manager, I used v2.6.0
#include <OneWire.h>  
#include <WiFi.h>
#include <DallasTemperature.h>  

// Hier wird der Eingangs-Pin deklariert, an dem das Sensor-Modul angeschlossen ist
#define KY001_Signal_PIN ...

// Libraries werden konfiguriert
OneWire oneWire(KY001_Signal_PIN);          
DallasTemperature sensors(&oneWire);

//WLAN Verbindung: Variablen werden deklariert
const char* ssid = "....";
const char* password = "....";

const char* awsEndpoint = ".....amazonaws.com"; 

// Variablen Deklaration MacAdresse:
#define BUFFER_LEN 512
#define BUFFER_TI 256
long lastMsg = 0;
char msg[BUFFER_LEN];
char ti[BUFFER_TI];
byte mac[6];
char mac_Id[18];

// Zeitvariablen
const char* ntpServer = "pool.ntp.org";
const long  gmtOffset_sec = 3600;
const int   daylightOffset_sec = 3600;

// AWS Zertifikate deklarieren und zuweisen 
// Anführungszeichen zu Beginn jeder Zeile und  \n" \ am Ende jeder Zeile 

// xxxxxxxxxx-certificate.pem.crt
const char* certificate_pem_crt = \

"-----BEGIN CERTIFICATE-----\n" \
"certificate_pem\n" \
 \
"-----END CERTIFICATE-----\n";

// xxxxxxxxxx-private.pem.key
const char* private_pem_key = \

"-----BEGIN RSA PRIVATE KEY-----\n" \
"private key\n" \
"-----END RSA PRIVATE KEY-----\n";
/* root CA can be downloaded in:
  https://www.symantec.com/content/en/us/enterprise/verisign/roots/VeriSign-Class%203-Public-Primary-Certification-Authority-G5.pem
*/
const char* rootCA = \
"-----BEGIN CERTIFICATE-----\n" \
"rootCA\n" \
"-----END CERTIFICATE-----\n";



// Der WifiClientSecure unterstützt bei der sicheren Verbindung über TLS (SSL)
WiFiClientSecure wiFiClient;
void msgReceived(char* topic, byte* payload, unsigned int len);
PubSubClient pubSubClient(awsEndpoint, 8883, msgReceived, wiFiClient);

void setup() {
  
  // Ausgabe von Baudrate im seriellen Monitor 
  Serial.begin(115200); delay(50); Serial.println();
  // Sensor wird initialisiert
    sensors.begin(); 
  Serial.println("ESP32 AWS IoT Example");
  Serial.printf("SDK version: %s\n", ESP.getSdkVersion());
  
  // WLAN Verbindung und Ausgabe der IP-Adresse im seriellen Monitor, wenn die Verbindung funktioniert hat
  Serial.print("Connecting to "); Serial.print(ssid);
  WiFi.begin(ssid, password);
  WiFi.waitForConnectResult();
  Serial.print(", WiFi connected, IP address: "); Serial.println(WiFi.localIP());

  WiFi.macAddress(mac);  // Holt Mac Adresse vom ESP
snprintf(mac_Id, sizeof(mac_Id), "%02x:%02x:%02x:%02x:%02x:%02x",
mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
Serial.print(mac_Id); //Umwandlung in String

 // Zertifikate einbinden
  wiFiClient.setCACert(rootCA);
  wiFiClient.setCertificate(certificate_pem_crt);
  wiFiClient.setPrivateKey(private_pem_key);

 //init and get the time
 configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
}

// Variablen deklarieren
unsigned long lastPublish;
int msgCount;


void loop() {

delay(4000);
  struct tm timeinfo;
  if(!getLocalTime(&timeinfo)){
    Serial.println("Failed to obtain time");
    return;
  }
  Serial.println(&timeinfo, "%A, %B %d %Y %H:%M:%S");

 // Temperaturmessung wird gestartet...
    sensors.requestTemperatures(); 
    // ... und gemessene Temperatur ausgeben
    Serial.print("Temperatur: ");
    Serial.print(sensors.getTempCByIndex(0));
    Serial.write(176); // UniCode-Angabe eines char-Symbols für das "°-Symbol"
    Serial.println("C");
         
    delay(4000);    // 5s Pause bis zur nächsten Messung

  pubSubCheckConnect(); 

 int month = (timeinfo.tm_mon + 1);
 int year = (timeinfo.tm_year + 1900);
 String macIdStr = mac_Id;  //Umwandlung in String - Übergabe ins Ausgabevariable

snprintf (zeit, BUFFER_TI, "%02d.%02d.%d, %02d:%02d:%02d", timeinfo.tm_mday, month, year, timeinfo.tm_hour, timeinfo.tm_min, timeinfo.tm_sec);
snprintf (msg, BUFFER_LEN, "{\"mac_Id\":\"%s\",\"uptime\":%lu,\"temp\":%f,\"time\":\"%s\"}", macIdStr.c_str(), millis() / 1000, sensors.getTempCByIndex(0), zeit); //Speichern der MacID, Uptime, Temperatur in msg-Variable

  
  if (millis() - lastPublish > 60000) { //Festlegen wie oft die Nachricht an AWS gesendet wird 60000 - 1 Minute
      lastPublish = millis();
 
  boolean rc = pubSubClient.publish("....", msg);  //mqttClient.publish("outTopic", msg); Ausgabe von msg im AWS-Topic


  //Ausgabe von msg im seriellen Monitor
  Serial.print("Publish message: ");
  Serial.println(msg);

  }
}

void msgReceived(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message received on "); Serial.print(topic); Serial.print(": ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
}

// AWS Verbindung und Ausgabe im seriellen Monitor, wenn die Verbindung funktioniert hat
void pubSubCheckConnect() {
  if ( ! pubSubClient.connected()) { //checkt, ob der Client noch mit dem Server verbunden ist 
    Serial.print("PubSubClient connecting to: "); Serial.print(awsEndpoint); //Ausgabe des AWS Endpoints im seriellen Monitor
    while ( ! pubSubClient.connected()) {
      Serial.print(".");
      pubSubClient.connect("ESPthingXXXX");
      delay(1000);
    }
    Serial.println(" connected");
    pubSubClient.subscribe("...."); // abonniert das angegebene Thema
  }
  pubSubClient.loop(); // ermöglicht, dass der Client eingehende Nachrichten verarbeiten und die Verbindung zum Server aufrechterhalten kann
}
